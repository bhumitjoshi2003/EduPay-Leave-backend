package com.indraacademy.ias_management.service;

import com.indraacademy.ias_management.entity.Leave;
import com.indraacademy.ias_management.repository.LeaveRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

@Service
public class LeaveService {

    private static final Logger log = LoggerFactory.getLogger(LeaveService.class);
    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("dd-MM-yyyy");

    @Autowired private LeaveRepository leaveRepository;
    @Autowired private NotificationService notificationService;

    @Transactional
    public void applyLeave(Leave leave){
        if (leave == null || leave.getStudentId() == null || leave.getLeaveDate() == null) {
            log.warn("Attempted to apply a null leave object or missing required fields.");
            throw new IllegalArgumentException("Leave object and its required fields must not be null.");
        }
        log.info("Applying leave for student ID: {} on date: {}", leave.getStudentId(), leave.getLeaveDate());

        try {
            leave.setAppliedDate(LocalDateTime.now());
            Leave savedLeave = leaveRepository.save(leave);

            String studentMessage = String.format("Your leave application for %s has been submitted.", savedLeave.getLeaveDate());
            notificationService.createAutoGeneratedIndividualNotification(
                    "Leave Application Submitted", // Title
                    studentMessage,              // Message
                    "Leave Application Submitted",     // Type
                    savedLeave.getStudentId(),          // User ID of the student
                    "Leave",                     // relatedEntityType
                    savedLeave.getId()                // relatedEntityId (String) - Note: Leave ID appears to be a String in this context
            );
            log.info("Leave applied and notification sent successfully for ID: {}", savedLeave.getId());
        } catch (DataAccessException e) {
            log.error("Data access error during leave application for student ID: {}", leave.getStudentId(), e);
            throw new RuntimeException("Could not apply leave due to data access issue", e);
        } catch (Exception e) {
            log.error("Error sending notification after leave application for student ID: {}", leave.getStudentId(), e);
            // This transaction will still commit the leave save, but we log the notification failure.
        }
    }

    @Transactional
    public void deleteLeave(String studentId, String leaveDate) {
        if (studentId == null || studentId.trim().isEmpty() || leaveDate == null || leaveDate.trim().isEmpty()) {
            log.warn("Attempted to delete leave with null/empty student ID or leave date.");
            throw new IllegalArgumentException("Student ID and leave date must be provided for deletion.");
        }
        log.info("Attempting to delete leave for student ID: {} on date: {}", studentId, leaveDate);

        try {
            Leave leave = leaveRepository.findByStudentIdAndLeaveDate(studentId, leaveDate);
            if (leave != null) {
                String leaveId = String.valueOf(leave.getId());
                leaveRepository.deleteByStudentIdAndLeaveDate(studentId, leaveDate);

                String studentMessage = String.format("Your leave application for %s has been deleted.", leave.getLeaveDate());
                notificationService.createAutoGeneratedIndividualNotification(
                        "Leave Application Cancelled",
                        studentMessage,
                        "Leave Application Deleted",
                        leave.getStudentId(),
                        "Leave",
                        Long.valueOf(leaveId)
                );
                log.info("Leave deleted and notification sent successfully for student ID: {}", studentId);
            } else {
                log.warn("Leave not found for student {} on date {}", studentId, leaveDate);
                throw new IllegalArgumentException("Leave not found for student " + studentId + " on date " + leaveDate);
            }
        } catch (DataAccessException e) {
            log.error("Data access error during deleteLeave for student ID: {}", studentId, e);
            throw new RuntimeException("Could not delete leave due to data access issue", e);
        } catch (IllegalArgumentException e) {
            throw e; // Re-throw the not found exception
        } catch (Exception e) {
            log.error("Error sending notification after leave deletion for student ID: {}", studentId, e);
        }
    }

    @Transactional
    public void deleteLeaveById(String leaveId) {
        if (leaveId == null || leaveId.trim().isEmpty()) {
            log.warn("Attempted to delete leave with null/empty leave ID.");
            throw new IllegalArgumentException("Leave ID must be provided for deletion.");
        }
        log.info("Attempting to delete leave by ID: {}", leaveId);

        try {
            Optional<Leave> optionalLeave = leaveRepository.findById(leaveId);
            if (optionalLeave.isPresent()) {
                Leave leave = optionalLeave.get();
                leaveRepository.deleteById(leaveId);

                String studentMessage = String.format("Your leave application for %s has been deleted.", leave.getLeaveDate());
                notificationService.createAutoGeneratedIndividualNotification(
                        "Leave Application Cancelled",
                        studentMessage,
                        "Leave_Cancelled_Student",
                        leave.getStudentId(),
                        "Leave",
                        leave.getId()
                );
                log.info("Leave deleted by ID: {} and notification sent successfully.", leaveId);
            } else {
                log.warn("Leave not found with ID: {}", leaveId);
                throw new IllegalArgumentException("Leave with ID " + leaveId + " not found.");
            }
        } catch (DataAccessException e) {
            log.error("Data access error during deleteLeaveById for ID: {}", leaveId, e);
            throw new RuntimeException("Could not delete leave due to data access issue", e);
        } catch (IllegalArgumentException e) {
            throw e; // Re-throw the not found exception
        } catch (Exception e) {
            log.error("Error sending notification after leave deletion by ID: {}", leaveId, e);
        }
    }

    public Optional<Leave> getLeaveById(String leaveId) {
        if (leaveId == null || leaveId.trim().isEmpty()) {
            log.warn("Attempted to get leave with null/empty ID.");
            return Optional.empty();
        }
        log.info("Fetching leave by ID: {}", leaveId);
        try {
            return leaveRepository.findById(leaveId);
        } catch (DataAccessException e) {
            log.error("Data access error fetching leave ID: {}", leaveId, e);
            throw new RuntimeException("Could not retrieve leave due to data access issue", e);
        }
    }

    public Page<Leave> getLeavesFiltered(String className, String studentId, String date, Pageable pageable) {
        log.info("Filtering leaves. Class: {}, Student ID: {}, Date: {}", className, studentId, date);
        try {
            if (className != null && studentId != null && date != null) {
                return leaveRepository.findByClassNameAndStudentIdContainingAndLeaveDate(className, studentId, date, pageable);
            } else if (className != null && studentId != null) {
                return leaveRepository.findByClassNameAndStudentIdContaining(className, studentId, pageable);
            } else if (className != null && date != null) {
                return leaveRepository.findByClassNameAndLeaveDate(className, date, pageable);
            } else if (studentId != null && date != null) {
                return leaveRepository.findByStudentIdContainingAndLeaveDate(studentId, date, pageable);
            } else if (className != null) {
                return leaveRepository.findByClassName(className, pageable);
            } else if (studentId != null) {
                return leaveRepository.findByStudentIdContaining(studentId, pageable);
            } else if (date != null) {
                return leaveRepository.findByLeaveDate(date, pageable);
            } else {
                return leaveRepository.findAll(pageable);
            }
        } catch (DataAccessException e) {
            log.error("Data access error during getLeavesFiltered. Class: {}, Student ID: {}, Date: {}", className, studentId, date, e);
            throw new RuntimeException("Could not retrieve filtered leaves due to data access issue", e);
        }
    }

    public Page<Leave> getLeavesByStudentId(String studentId, Pageable pageable) {
        if (studentId == null || studentId.trim().isEmpty()) {
            log.warn("Attempted to get leaves with null/empty student ID.");
            return Page.empty(pageable);
        }
        log.info("Fetching leaves for student ID: {}", studentId);
        try {
            return leaveRepository.findByStudentId(studentId, pageable);
        } catch (DataAccessException e) {
            log.error("Data access error fetching leaves for student ID: {}", studentId, e);
            throw new RuntimeException("Could not retrieve leaves by student ID due to data access issue", e);
        }
    }

    public List<String> getLeavesByDateAndClass(String date, String className) {
        if (date == null || date.trim().isEmpty() || className == null || className.trim().isEmpty()) {
            log.warn("Attempted to get leaves by date/class with null/empty parameters. Date: {}, Class: {}", date, className);
            return Collections.emptyList();
        }
        log.info("Fetching leave student IDs for date: {} and class: {}", date, className);
        try {
            return leaveRepository.findByLeaveDateAndClassName(date, className);
        } catch (DataAccessException e) {
            log.error("Data access error fetching leaves by date {} and class {}", date, className, e);
            throw new RuntimeException("Could not retrieve leaves due to data access issue", e);
        }
    }
}